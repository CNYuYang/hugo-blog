<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>余为民同志|做一个优秀的普通人，在热爱中燃烧！</title>
    
    
    
    <link>https://yuyang.run/</link>
    <description>Recent content on 余为民同志|做一个优秀的普通人，在热爱中燃烧！</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>744727849@qq.com (YuYang)</managingEditor>
    <webMaster>744727849@qq.com (YuYang)</webMaster>
    <lastBuildDate>Wed, 20 Dec 2023 20:25:11 +0800</lastBuildDate>
    
	<atom:link href="https://yuyang.run/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>BusTub已实现部分</title>
      <link>https://yuyang.run/posts/cmu15-445%E5%AE%9E%E9%AA%8C/bustub%E5%B7%B2%E5%AE%9E%E7%8E%B0%E9%83%A8%E5%88%86/</link>
      <pubDate>Wed, 20 Dec 2023 20:25:11 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/cmu15-445%E5%AE%9E%E9%AA%8C/bustub%E5%B7%B2%E5%AE%9E%E7%8E%B0%E9%83%A8%E5%88%86/</guid>
      <description>
        
          &lt;img src=&#34;https://yuyang.run/cover/database.png&#34;/&gt;
          
        
        
        
          🔗代码实现链接：https://gitee.com/cnyuyang/bustub Channel的实现 #
          
        
        </description>
    </item>
    
    <item>
      <title>openGuass编译</title>
      <link>https://yuyang.run/posts/%E6%BA%90%E7%A0%81/openguass%E7%BC%96%E8%AF%91/</link>
      <pubDate>Mon, 04 Dec 2023 00:55:34 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/%E6%BA%90%E7%A0%81/openguass%E7%BC%96%E8%AF%91/</guid>
      <description>
        
          
          
          
        
        
        
          下载并安装CentOS7.6：https://mirrors.aliyun.com/centos-vault/7.6.1810。这里选择的是CentOS-7-x86_64-DVD-1810.iso，避免其他版本出现缺失软件的情况。 下载编译工具：https://gitee.com/opengauss/
          
        
        </description>
    </item>
    
    <item>
      <title>Lecture#16 Concurrency Control Theory</title>
      <link>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/concurrency-control-theory/</link>
      <pubDate>Mon, 04 Dec 2023 00:06:13 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/concurrency-control-theory/</guid>
      <description>
        
          &lt;img src=&#34;https://yuyang.run/cover/database.png&#34;/&gt;
          
        
        
        
          回顾本课程的路线图： 在前面的课程中介绍了 DBMS 的主要模块及架构，自底向上依次是 Disk Manager、Buffer Pool Manager、Access Methods、Operator Execution 及 Query Planning。但数据库要解决的问题并不仅仅停留在功能的实现上，它还需要具备： 满足多个用户同时读写数据，即 Concurrency Control。如
          
        
        </description>
    </item>
    
    <item>
      <title>[WIP]Lecture#15 Query Planning &amp; Optimization II</title>
      <link>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/query-planning-optimization-ii/</link>
      <pubDate>Sun, 03 Dec 2023 00:36:23 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/query-planning-optimization-ii/</guid>
      <description>
        
          &lt;img src=&#34;https://yuyang.run/cover/database.png&#34;/&gt;
          
        
        
        
          许多操作没有通用的规则，如 Join：Join 操作既符合交换律又符合结合律，等价关系代数表达式数量庞大，这时候就需要一些成本估算技术，将过滤性大的表作为 Outer Table，小的作为 Inner Table，从而达到查询优化的目的。 花销估算 # 一个查询需要花费多长时间，取决于许多因素： CPU: Small cost; tough to estimate Disk: #block transfers Memory: Amount of DRAM used Network: #messages 但本质
          
        
        </description>
    </item>
    
    <item>
      <title>Lecture#14 Query Planning &amp; Optimization I</title>
      <link>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/query-planning-optimization-i/</link>
      <pubDate>Sun, 03 Dec 2023 00:07:34 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/query-planning-optimization-i/</guid>
      <description>
        
          &lt;img src=&#34;https://yuyang.run/cover/database.png&#34;/&gt;
          
        
        
        
          SQL是声明性的，这意味着用户告诉 DBMS 他们想要什么答案，而不是如何得到答案。因此，DBMS 需要将 SQL 语句转换为可执行的查询计划。 但不同的查询计划的效率可能出现多个数量级的差别，如 Join Algorithms 一节中的 Simple Nested Loop Join 与 Hash Join 的时间对比 (1.3 hours vs. 0.45 seconds)。因此，DBMS 需要一种方法来为给定查询选择“最佳”计划。 这是 Query Optimizer
          
        
        </description>
    </item>
    
    <item>
      <title>Lecture#13 Query Execution II</title>
      <link>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/query-execution-ii/</link>
      <pubDate>Thu, 23 Nov 2023 15:29:13 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/query-execution-ii/</guid>
      <description>
        
          &lt;img src=&#34;https://yuyang.run/cover/database.png&#34;/&gt;
          
        
        
        
          我们在 Lec12 中已经讨论了怎么将 operators 组织为一个 query plan。当时我们是假设 query 是由一个 worker (是 DBMS 的组件，负责代表客户机执行任务并返回结果，可能是一个线程或进程) 执行。然而在实践中，query 往往是由多个 workers 并发执行。并发执行为 DBMS 提供了很多好处： 提高吞吐量 (每秒能执行多少 query)，降低延迟 (执行一条 query 需要多久)。
          
        
        </description>
    </item>
    
    <item>
      <title>Lecture#12 Query Execution I</title>
      <link>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/query-execution-i/</link>
      <pubDate>Wed, 22 Nov 2023 15:29:13 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/query-execution-i/</guid>
      <description>
        
          &lt;img src=&#34;https://yuyang.run/cover/database.png&#34;/&gt;
          
        
        
        
          通常一个 SQL 语句会被组织成如图的树状查询计划，数据从叶节点流到根节点，查询结果在根节点中得出。 通常，树上的操作符 operators 是二元的 (1~2个子运算符)。 处理模型 # DBMS 的 processing model 定义了系统如何执行一个 query plan。目前主要有三种模型： 迭代模型（Iterator Model） 物化模型（Materialization Mode
          
        
        </description>
    </item>
    
    <item>
      <title>Lecture#11 Joins Algorithms</title>
      <link>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/joins-algorithms/</link>
      <pubDate>Tue, 21 Nov 2023 15:29:13 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/joins-algorithms/</guid>
      <description>
        
          &lt;img src=&#34;https://yuyang.run/cover/database.png&#34;/&gt;
          
        
        
        
          Joins # 在关系型数据库中，我们常常通过规范化 (Normalization) 设计避免信息冗余；因此查询时，就需要通过 Join 将不同 table 中的数据合并来重建数据。 本课关注双表的内等值连接。原则上我们希望，连接时将小表放到左侧 (作为外表)。 首先要讨论的是：Join 的输出和成本分析。 Join操作输出 # 逻辑上 Join 的操作的结果是：对任意一个 tuple r ∈ R 和任意
          
        
        </description>
    </item>
    
    <item>
      <title>Lecture#10 Sorting &#43; Aggregations</title>
      <link>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/sorting-&#43;-aggregations/</link>
      <pubDate>Mon, 20 Nov 2023 15:29:13 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/sorting-&#43;-aggregations/</guid>
      <description>
        
          &lt;img src=&#34;https://yuyang.run/cover/database.png&#34;/&gt;
          
        
        
        
          外排序算法 # DBMS需要对数据进行排序，因为在关系模型下，表中的tuple没有特定的顺序，排序在ORDER BY、GROUP BY、JOIN和DISTINCT操作符中可能使用。如果需要排序的数据在内存中可以放下，那么DBMS可以使用标准的排序算法（qsort）。如果放不下，则需要使用external so
          
        
        </description>
    </item>
    
    <item>
      <title>Lecture#9 Index Concurrency Control</title>
      <link>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/index-concurrency-control/</link>
      <pubDate>Mon, 20 Nov 2023 15:29:13 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/index-concurrency-control/</guid>
      <description>
        
          &lt;img src=&#34;https://yuyang.run/cover/database.png&#34;/&gt;
          
        
        
        
          我们假设迄今为止讨论过的所有数据结构都是单线程的。但我们需要允许多线程安全地访问我们的数据结构，以利用额外的 CPU 内核。 Latches介绍 # LOCKS和LATCHES对比 # 讨论DBMS如何保护其内部元素的时候，lock和latch之间有重要区别。 Locks Lock是一个更高层次的逻辑基元(logical prim
          
        
        </description>
    </item>
    
    <item>
      <title>Lecture#8 Tree Indexes II</title>
      <link>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/tree-indexes-ii/</link>
      <pubDate>Sat, 18 Nov 2023 15:29:13 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/tree-indexes-ii/</guid>
      <description>
        
          &lt;img src=&#34;https://yuyang.run/cover/database.png&#34;/&gt;
          
        
        
        
          B+树更多的细节 # 重复的key # 方案1:追加 Record Id # 将元组的唯一Record ID作为键的一部分，确保所有键都是唯一的。 DBMS仍然可以使用部分键来查找元组。 方案2:Overflow Leaf Nodes # 允许叶节点溢出到包含重复key的溢出节点中。维护和修改起来比较复杂。 且查找时不能采用二分查找，应该为顺序查找。 隐式索
          
        
        </description>
    </item>
    
    <item>
      <title>使用Idea2023运行tomcat9项目</title>
      <link>https://yuyang.run/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E4%BD%BF%E7%94%A8idea%E8%BF%90%E8%A1%8Ctomcat9%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Thu, 12 Oct 2023 15:29:13 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E4%BD%BF%E7%94%A8idea%E8%BF%90%E8%A1%8Ctomcat9%E9%A1%B9%E7%9B%AE/</guid>
      <description>
        
          
          
          
        
        
        
          源码获取 # 使用git clone命令获取9.0.x源码：git clone -b 9.0.x git@github.com:apache/tomcat.git Idea运行 # 添加pom.xml # tomcat9项目是使用ant编译的，需要先将其使用maven管理。 新建pom.xml文件： &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;org.apache.tomcat&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tomcat&amp;lt;/artifactId&amp;gt; &amp;lt;name&amp;gt;tomcat&amp;lt;/name&amp;gt; &amp;lt;version&amp;gt;9.0.19&amp;lt;/version&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.12&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.ant&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;ant&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.10.5&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;wsdl4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;wsdl4j&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.6.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;biz.aQute.bnd&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;biz.aQute.bndlib&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.geronimo.specs&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;geronimo-jaxrpc_1.1_spec&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jdt&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;ecj&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.17.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.easymock&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;easymock&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.0.2&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt;
          
        
        </description>
    </item>
    
    <item>
      <title>使用react-router重构前端路由</title>
      <link>https://yuyang.run/posts/%E9%87%8D%E6%9E%84/%E4%BD%BF%E7%94%A8react-router%E9%87%8D%E6%9E%84%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1/</link>
      <pubDate>Thu, 12 Oct 2023 15:29:13 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/%E9%87%8D%E6%9E%84/%E4%BD%BF%E7%94%A8react-router%E9%87%8D%E6%9E%84%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1/</guid>
      <description>
        
          
          
          
        
        
        
          重构前情况 # 因为公司的特点，开发人员没有太多区分，都是称为通用软件开发工程师。所以在工作中的看到的很多前端项目，都是有后端人员开发而来。所以在我们的代码中有很多后端程序思维写出的前端代码，而在一个项目中的路由情况尤为糟糕。 打开项目后看到的router.js代码： &amp;lt;HashRouter&amp;gt; &amp;lt;Route path=&amp;#34;/&amp;#34; component={TempMgrView}/&amp;gt; ... &amp;lt;Route path=&amp;#34;/settings&amp;#34; component={SettingView}/&amp;gt; &amp;lt;/HashRouter&amp;gt; 看起来是用了路由功能
          
        
        </description>
    </item>
    
    <item>
      <title>kafka单机环境搭建</title>
      <link>https://yuyang.run/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka%E5%8D%95%E6%9C%BA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 10 Jul 2023 15:29:13 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka%E5%8D%95%E6%9C%BA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>
        
          
          
          
        
        
        
          软件版本 # jdk-8u271-linux-x64.tar.gz apache-zookeeper-3.8.1-bin.tar.gz kafka_2.12-3.4.0.tgz 解压添加PATH等步骤忽略，不进行记录。java安装过程跳过 zookeeper安装 # 先进入conf目录 复制一份zoo.cfg: cp zoo_sample.cfg zoo.cfg 修改zoo.cfg，修改数据目录：dataDir=../tmp/zookeeper 先进入bin目录 执行./zkServer.sh start 使用jps查看是否启动
          
        
        </description>
    </item>
    
    <item>
      <title>手搓zookeeper样例实现记录</title>
      <link>https://yuyang.run/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%89%8B%E6%90%93zookeeper%E6%A0%B7%E4%BE%8B%E5%AE%9E%E7%8E%B0%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Fri, 02 Jun 2023 15:29:13 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%89%8B%E6%90%93zookeeper%E6%A0%B7%E4%BE%8B%E5%AE%9E%E7%8E%B0%E8%AE%B0%E5%BD%95/</guid>
      <description>
        
          
          
          
        
        
        
          在学习zookeeper过程中，学习了一个监听节点状态变化，而开始、停止计数的案例。看懂了不代表就会了，于是想自己实现一个简单的版本。在自己实现的过程中也遇到了一些问题，在这里记录一下。 实现代码内容 在zookeeper中创建/YuYang节点开始计数 在zookeeper中删除/YuYang节点停止计
          
        
        </description>
    </item>
    
    <item>
      <title>Lecture#7 Tree Indexes I</title>
      <link>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/tree-indexes-i/</link>
      <pubDate>Sat, 06 Jun 2020 15:29:13 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/tree-indexes-i/</guid>
      <description>
        
          &lt;img src=&#34;https://yuyang.run/cover/database.png&#34;/&gt;
          
        
        
        
          构建索引的另一种方式就是通过Tree。 B+ Tree # 有一个称为B树的特定数据结构。 人们还使用该术语来泛指一类平衡树数据结构： → B-Tree (1971) → B+Tree (1973) → B*Tree (1977?) → B^link-Tree (1981) 相关资料 # 关于B树及B+树可以通过以下两篇文章了解： 漫画：什么是B-树？https://juejin.im/post/5c31f64c6fb9a049ac794
          
        
        </description>
    </item>
    
    <item>
      <title>Lecture#6 Hash Tables</title>
      <link>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/hash-tables/</link>
      <pubDate>Sun, 10 May 2020 15:29:13 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/hash-tables/</guid>
      <description>
        
          &lt;img src=&#34;https://yuyang.run/cover/database.png&#34;/&gt;
          
        
        
        
          Hash Tables # 哈希表实现了将键映射到值的无序关联数组。它使用哈希函数为给定键计算数组的偏移量，从该偏移量可以 可以找到值。 空间复杂度：O(n) 操作复杂度： →平均：O(1) →最差：O(n) Static Hash Tables # 分配一个巨大的数组，该数组为您需要存储的每个元素分配一个插槽。 要查找条目，请通过%n以找到数组中的偏移量 前提 # 您会提
          
        
        </description>
    </item>
    
    <item>
      <title>Lab1 Buffer Pool</title>
      <link>https://yuyang.run/posts/cmu15-445%E5%AE%9E%E9%AA%8C/lab1-buffer-pool/</link>
      <pubDate>Fri, 08 May 2020 15:29:13 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/cmu15-445%E5%AE%9E%E9%AA%8C/lab1-buffer-pool/</guid>
      <description>
        
          &lt;img src=&#34;https://yuyang.run/cover/database.png&#34;/&gt;
          
        
        
        
          🔗代码实现链接：https://gitee.com/cnyuyang/bustub 第一次做这个实验的时候在2020年，当时需要实现的是时钟替换策略等。在2023年再次做时，发现需要实现的内容已经有所变换，所以索性将该项目完完整整的实现了一遍。 DiskScheduler实现 # 🔗代码链接：https:/
          
        
        </description>
    </item>
    
    <item>
      <title>Lecture#5 Buffer Pools</title>
      <link>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/buffer-pools/</link>
      <pubDate>Fri, 08 May 2020 15:29:13 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/buffer-pools/</guid>
      <description>
        
          &lt;img src=&#34;https://yuyang.run/cover/database.png&#34;/&gt;
          
        
        
        
          双重环境 # 前端采用OLTP型数据库，负责数据的查询、修改。后端采用OLAP型数据库，负责数据的分析。 Buffer Pool Manager # Buffer Pool 组织 # 内存区域组织为固定大小的页面数组。 数组条目称为frame。 当DBMS请求页面时，将精确的副本放置在这些frame之一中。 Buffer Pool元数据 # page table跟踪当前在内存中的页面。 每页还维
          
        
        </description>
    </item>
    
    <item>
      <title>Lecture#4 Database Storage II</title>
      <link>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/database-storage-ii/</link>
      <pubDate>Thu, 07 May 2020 15:29:13 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/database-storage-ii/</guid>
      <description>
        
          &lt;img src=&#34;https://yuyang.run/cover/database.png&#34;/&gt;
          
        
        
        
          日志结构的文件组织 # DBMS只存储日志记录，而不是在页面中存储元组。 系统将日志记录追加到有关如何修改数据库的文件中： →插入存储整个元组。 →删除将元组标记为已删除。 →更新仅包含已修改属性的增量。 建立索引以使其跳至日志中的位置。 定期压缩日志。 数据表示 # 元组本质上是字节序列。 DBMS的工作是将这些字节解释
          
        
        </description>
    </item>
    
    <item>
      <title>Lecture#3 Database Storage I</title>
      <link>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/database-storage-i/</link>
      <pubDate>Wed, 06 May 2020 15:29:13 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/database-storage-i/</guid>
      <description>
        
          &lt;img src=&#34;https://yuyang.run/cover/database.png&#34;/&gt;
          
        
        
        
          面向磁盘的DBMS # 数据库全部在磁盘上，数据库文件中的数据被组织成页面，第一页是目录页面。 为了对数据进行操作，DBMS需要将数据带入内存。它通过具有一个缓冲池来实现此目的，该缓冲池管理着磁盘和内存之间的来回移动。 DBMS还具有将执行查询的执行引擎。 执行引擎将向缓冲池询问特定的页面，并且缓冲池将负责将
          
        
        </description>
    </item>
    
    <item>
      <title>Lecture#2 Advanced SQL</title>
      <link>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/advanced-sql/</link>
      <pubDate>Tue, 05 May 2020 15:29:13 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/advanced-sql/</guid>
      <description>
        
          &lt;img src=&#34;https://yuyang.run/cover/database.png&#34;/&gt;
          
        
        
        
          SQL的历史 # 最新的SQL规范：2016 → SQL:2016 → JSON, Polymorphic tables → SQL:2011 → Temporal DBs, Pipelined DML → SQL:2008 → TRUNCATE, Fancy sorting → SQL:2003 → XML, windows, sequences, auto-gen IDs. → SQL:1999 → Regex, triggers, OO 大部分的DBMS都至少遵守SQL-92，因为制定SQL标准的人都来自各大SQL公司，都将自己公司产品的相关特性指定进去，慢慢的就没公司遵守。 各大数据库的详细对比：http://troels.ar
          
        
        </description>
    </item>
    
    <item>
      <title>Lecture#1 Course Introduction and the Relational Model</title>
      <link>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/course-introduction-and-the-relational-model/</link>
      <pubDate>Mon, 04 May 2020 15:29:13 +0800</pubDate>
      <author>744727849@qq.com (YuYang)</author>
      <guid>https://yuyang.run/posts/cmu15-445%E8%AF%BE%E7%A8%8B/course-introduction-and-the-relational-model/</guid>
      <description>
        
          &lt;img src=&#34;https://yuyang.run/cover/database.png&#34;/&gt;
          
        
        
        
          关系性数据库提出的背景 # 刚开始是没有数据库这概念的.当数据量比较少时用一个啥txt文本文件就差不多就能搞定了.但数据量稍微多一点时,而且数据保存在不同的文件中.比如啥txt,doc,excel等文件.==此时要处理数据还是手动去查询更改就非常之麻烦==.可能得再整个简单应用程序帮你做些事了.只给你提
          
        
        </description>
    </item>
    
  </channel>
</rss>